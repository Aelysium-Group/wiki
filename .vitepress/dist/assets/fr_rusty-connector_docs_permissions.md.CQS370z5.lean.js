import{_ as o,c as s,a1 as a,o as t}from"./chunks/framework.C7abYapc.js";const h=JSON.parse('{"title":"ðŸ“Œ Permissions","description":"RustyConnector Permission Commands","frontmatter":{"title":"ðŸ“Œ Permissions","description":"RustyConnector Permission Commands","sidebar_position":3,"displayed_sidebar":"plugins_wiki_rusty_connector"},"headers":[],"relativePath":"fr/rusty-connector/docs/permissions.md","filePath":"fr/rusty-connector/docs/permissions.md"}'),c={name:"fr/rusty-connector/docs/permissions.md"};function n(r,e,i,d,p,l){return t(),s("div",null,e[0]||(e[0]=[a('<p>Any permission can have the wildcard <code>*</code> added to the end to allow all sub-permission of that node.</p><p><code>rustyconnector.*</code> | Bypass all permission checks. Full permission.</p><h2 id="whitelist" tabindex="-1">Whitelist <a class="header-anchor" href="#whitelist" aria-label="Permalink to &quot;Whitelist&quot;">â€‹</a></h2><p><code>rustyconnector.whitelist.*</code> | Bypass all RC-Velocity whitelists.</p><p><code>rustyconnector.whitelist.&lt;whitelist name&gt;</code> | Bypass a specific RC-Velocity whitelist.</p><p><strong>NOTE:</strong> Whitelist permissions only bypass whitelists that have <code>use-permission</code> set to true. Whitelist permission do not bypass server-specific whitelists.</p><h2 id="player-limits" tabindex="-1">Player Limits <a class="header-anchor" href="#player-limits" aria-label="Permalink to &quot;Player Limits&quot;">â€‹</a></h2><p><code>rustyconnector.&lt;family name&gt;.*</code> | Bypass the hard and soft caps of a specific family.</p><p><code>rustyconnector.softCapBypass</code> | Bypass the soft-cap of any RC-Paper server.</p><p><code>rustyconnector.&lt;family name&gt;.softCapBypass</code> | Bypass the soft-cap of any RC-Paper server inside of a specific family.</p><p><code>rustyconnector.hardCapBypass</code> | Bypass the hard-cap of any RC-Paper server.</p><p><code>rustyconnector.&lt;family name&gt;.hardCapBypass</code> | Bypass the hard-cap of any RC-Paper server inside of a specific family.</p><p><strong>NOTE:</strong> The hard cap bypass permissions will automatically bypass soft-cap as well.</p><h2 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">â€‹</a></h2><p>Unless otherwise stated; all commands must be sent from the console. There&#39;s no need for command permissions.</p><p><code>rustyconnector.command.*</code> | Allows a player to use all player-facing commands.</p><p><code>rustyconnector.command.tpa</code> | Allows a player to use the <code>/tpa</code> command where it&#39;s enabled.</p><p><code>rustyconnector.command.party</code> | Allows a player to use the <code>/party</code> command where it&#39;s enabled.</p><p><code>rustyconnector.command.friends</code> | Allows a player to use the <code>/friends</code> command where it&#39;s enabled.</p><p><code>rustyconnector.command.unfriend</code> Allows a player to use the <code>/unfriend</code> command where it&#39;s enabled.</p><p><code>rustyconnector.command.hub</code> | Allows a player to use the <code>/hub</code> command where it&#39;s enabled.</p><p><code>rustyconnector.command.anchor.&lt;anchor name&gt;</code> | Allows a player to use the <code>/&lt;anchor name&gt;</code> command where it&#39;s enabled. Anchors are a part of the dynamic teleport module and the name of the command is configurable.</p><p><code>rustyconnector.command.anchor</code> | Allows a player to use any anchor command where it&#39;s enabled. Anchors are a part of the dynamic teleport module and the name of the command is configurable. This permission is equivalent to <code>rustyconnector.command.anchor.*</code></p><p><code>rustyconnector.command.tpa</code> | Allows a player to use the <code>/tpa</code> command where it&#39;s enabled.</p>',24)]))}const y=o(c,[["render",n]]);export{h as __pageData,y as default};
