import{_ as p,c as f,j as t,a,G as l,w as o,a1 as m,B as n,o as y}from"./chunks/framework.C7abYapc.js";const T=JSON.parse('{"title":"üåßÔ∏è Scalar Family","description":"","frontmatter":{"title":"üåßÔ∏è Scalar Family","sidebar_position":1},"headers":[],"relativePath":"fr/rusty-connector/docs/concepts/families/scalar.md","filePath":"fr/rusty-connector/docs/concepts/families/scalar.md"}'),g={name:"fr/rusty-connector/docs/concepts/families/scalar.md"};function b(h,e,w,L,c,k){const i=n("MCLoaderTag"),s=n("DynamicTag"),d=n("TheLawTag"),r=n("MenuItem"),u=n("Menu");return y(),f("div",null,[t("p",null,[e[1]||(e[1]=a("Scalar Families are optimized to work best with stateless ")),l(i,null,{default:o(()=>e[0]||(e[0]=[a("Minecraft Loaders")])),_:1}),e[2]||(e[2]=a("."))]),t("details",null,[e[17]||(e[17]=t("summary",null,"What is a Stateless Minecraft Loader?",-1)),t("p",null,[e[4]||(e[4]=a(" A stateless ")),l(i,null,{default:o(()=>e[3]||(e[3]=[a("Minecraft Loader")])),_:1}),e[5]||(e[5]=a(" is a Loader which doesn't store it's own state. ")),e[6]||(e[6]=t("br",null,null,-1)),e[7]||(e[7]=t("br",null,null,-1)),e[8]||(e[8]=a(" For example, if a player joins a Loader and places a block. That action will be forgotten next time the Loader restarts. Ideally, stateless Loaders wouldn't actually allow players to do anything that would attempt alter state (For example, by using ")),e[9]||(e[9]=t("a",{href:"https://enginehub.org/worldguard"},"WorldGuard",-1)),e[10]||(e[10]=a(" to prevent players from placing blocks). ")),e[11]||(e[11]=t("br",null,null,-1)),e[12]||(e[12]=t("br",null,null,-1)),e[13]||(e[13]=a(" Examples of stateless Loaders would be Lobby, KitPVP, or Bedwars. ")),e[14]||(e[14]=t("br",null,null,-1)),e[15]||(e[15]=t("br",null,null,-1)),e[16]||(e[16]=a(" The inverse of a stateless Loader is a stateful Loader; such as a Survival Loader, or Plots Loader. "))])]),e[27]||(e[27]=t("h2",{id:"‚òÅÔ∏è-cloud-angle",tabindex:"-1"},[a("‚òÅÔ∏è Cloud Angle "),t("a",{class:"header-anchor",href:"#‚òÅÔ∏è-cloud-angle","aria-label":'Permalink to "‚òÅÔ∏è Cloud Angle"'},"‚Äã")],-1)),e[28]||(e[28]=t("details",null,[t("summary",null,"What is this?"),t("p",null,"Cloud angles provide explanations of family opperations through the usage of analogies.")],-1)),t("p",null,[e[19]||(e[19]=a("Scalar Families can be thought of as a üåßÔ∏è Rain Cloud over the ocean; where a single raindrop is the player, and the ocean is the collection of ")),l(i,null,{default:o(()=>e[18]||(e[18]=[a("Loaders")])),_:1}),e[20]||(e[20]=a(" contained in the family."))]),t("p",null,[e[22]||(e[22]=a("When a player enters the family's ")),l(s,{href:"concepts/load_balancing",emoji:"‚§µÔ∏è",name:"Load Balancer",title:"A link to a page for Load Balancers"}),e[23]||(e[23]=a(" it's represented by the raindrop falling through the air into the ocean.")),e[24]||(e[24]=t("br",null,null,-1)),e[25]||(e[25]=a(" All Loaders in a scalar family should theoretically be stateless and completly identical (in accordance with ")),l(d,null,{default:o(()=>e[21]||(e[21]=[a("The Rule of Families")])),_:1}),e[26]||(e[26]=a("). As such, regardless of where in the ocean the raindrop lands, it will still end up in the ocean."))]),e[29]||(e[29]=m('<p>Ultimatly, when a player connects to a Scalar Family, it doesn&#39;t matter which Loader they connect to, it will always seem like they&#39;ve connected to the same Loader.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">‚Äã</a></h2><p>Scalar families can be configured in the <code>families</code> folder. They are represented by a configuration file containing the family&#39;s name followed by the suffix <code>.scalar.yml</code>.</p><h3 id="parent-family" tabindex="-1">Parent Family <a class="header-anchor" href="#parent-family" aria-label="Permalink to &quot;Parent Family&quot;">‚Äã</a></h3><p>Parenting allows you to establish hierarchies between your families.</p><p>When you setup family parents, players will be connected to a family&#39;s parent if they are kicked or disconnected from their current family. If a parent family isn&#39;t established, the player will be connected to the root family.</p><p>If you setup the hub feature in Dynamic Teleport, it will also direct a player to the parent family of the one they&#39;re connected to.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Setting a parent family for the root familly is forbidden and will be ignored.</p></div>',8)),l(u,null,{default:o(()=>[l(r,{href:"concepts/load_balancing",title:"‚§µÔ∏è Load Balancing",description:"Read up more on Load Balancing in RC."}),l(r,{href:"concepts/whitelist",title:"üëÆ Whitelist",description:"Read up more on Whitelists in RC."})]),_:1})])}const v=p(g,[["render",b]]);export{T as __pageData,v as default};
