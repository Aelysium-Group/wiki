import{_ as s,c as a,a1 as i,o as t}from"./chunks/framework.C7abYapc.js";const c=JSON.parse('{"title":"ðŸ“² Item References","description":"","frontmatter":{"title":"ðŸ“² Item References","sidebar_position":5},"headers":[],"relativePath":"rusty-connector/toolkit/references.md","filePath":"rusty-connector/toolkit/references.md"}'),n={name:"rusty-connector/toolkit/references.md"};function l(h,e,r,p,d,o){return t(),a("div",null,e[0]||(e[0]=[i(`<p>Item References provide shorthand methods for fetching commonly searched for resources. Using an Item Reference is as simple as calling the Reference constructor along with a specific identification key. Then when you&#39;re ready to fetch the Referenced item, you can use <code>.get()</code>.</p><p>A difference between an Item Reference and something native to Java such as a <code>WeakReference</code> is that a <code>WeakReference</code> references something that, at somepoint, already existed. Alternatively, an Item Reference is more like a &quot;prebuilt search query&quot;. Whether or not the item actually exists isn&#39;t known until <code>.get()</code> is called.</p><h2 id="family" tabindex="-1">Family <a class="header-anchor" href="#family" aria-label="Permalink to &quot;Family&quot;">â€‹</a></h2><p>Searches for a family based on the ID assigned to it in <code>families.yml</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Family family </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Family.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(familyID).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Family References have an additional Override for the <code>.get()</code> method which allows for a boolean.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Behaves the same as .get();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Family family </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Family.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(familyID).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will fetch the Root Family if the referenced family could not be found.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Family family </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Family.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(familyID).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>Family.Reference</code> is backed by HashMap and should have near-instant responses.</p></div><h2 id="mcloader" tabindex="-1">MCLoader <a class="header-anchor" href="#mcloader" aria-label="Permalink to &quot;MCLoader&quot;">â€‹</a></h2><p>Searches for an MCLoader with the specified <code>UUID</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MCLoader mcLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MCLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>MCLoader.Reference</code> is backed by HashMap and should have near-instant responses.</p></div><h2 id="player" tabindex="-1">Player <a class="header-anchor" href="#player" aria-label="Permalink to &quot;Player&quot;">â€‹</a></h2><h3 id="uuid-based-reference" tabindex="-1">UUID-based Reference <a class="header-anchor" href="#uuid-based-reference" aria-label="Permalink to &quot;UUID-based Reference&quot;">â€‹</a></h3><p>Searches for a player based on their UUID.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Player player </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>Player.Reference</code> is backed by a database-synced HashMap. Theoretically there should be near-instant responses, however, databases can be weird at times.</p></div><h3 id="username-based-reference" tabindex="-1">Username-based Reference <a class="header-anchor" href="#username-based-reference" aria-label="Permalink to &quot;Username-based Reference&quot;">â€‹</a></h3><p>Searches for a player based on their Username.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Notch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Player player </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UsernameReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>Player.UsernameReference</code> is backed by two Hash-Map references, one of them is backed by the database. Responses should be pretty fast but may be delayed.</p></div><h2 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">â€‹</a></h2><p>Item References will <strong>only</strong> ever return the item they&#39;re referencing. If an Item Reference is unable to fetch the item, it will throw a <code>NoSuchElementException</code>.</p><p>:::caution It should be noted that Item References make direct static calls to the RustyConnector Flame. Make sure you only ever use them inside of <code>Tinder#onStart</code>! :::</p>`,24)]))}const y=s(n,[["render",l]]);export{c as __pageData,y as default};
