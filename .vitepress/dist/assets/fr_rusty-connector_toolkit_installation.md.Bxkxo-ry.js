import{_ as v,c as b,a1 as l,G as t,w as i,B as e,o as C,j as a,a as n}from"./chunks/framework.C7abYapc.js";const A=JSON.parse(`{"title":"⚒️ Installation","description":"Ready to switch? Let's go!","frontmatter":{"title":"⚒️ Installation","description":"Ready to switch? Let's go!","sidebar_position":1},"headers":[],"relativePath":"fr/rusty-connector/toolkit/installation.md","filePath":"fr/rusty-connector/toolkit/installation.md"}`),F={name:"fr/rusty-connector/toolkit/installation.md"};function T(w,s,R,x,I,B){const r=e("id"),p=e("name"),d=e("url"),h=e("repository"),k=e("repositories"),u=e("groupId"),y=e("artifactId"),g=e("version"),E=e("scope"),c=e("dependency"),m=e("dependencies"),o=e("TabItem"),f=e("Tabs");return C(),b("div",null,[s[25]||(s[25]=l('<p>import Tabs from &#39;@theme/Tabs&#39;; import TabItem from &#39;@theme/TabItem&#39;;</p><p>:::caution This page is for the RustyConnector API. For the plugin wiki, go <a href="/rusty-connector/docs/installation.html">here</a>. :::</p><p>The RustyConnector Toolkit grants you access to the power of RustyConnector through a custom Java API!</p><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li>Java 17 or later</li></ul><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><p>You can import the RustyConnector Toolkit via Maven and Gradle.</p>',7)),t(f,null,{default:i(()=>[t(o,{value:"maven",label:"Maven"},{default:i(()=>[a("pre",null,[a("code",null,[s[20]||(s[20]=n(`{"\\
`)),t(k,null,{default:i(()=>[s[7]||(s[7]=n(`\\n\\
    `)),t(h,null,{default:i(()=>[s[3]||(s[3]=n(`\\n\\
        `)),t(r,null,{default:i(()=>s[0]||(s[0]=[n("mrnavastar-releases")])),_:1}),s[4]||(s[4]=n(`\\n\\
        `)),t(p,null,{default:i(()=>s[1]||(s[1]=[n("MrNavaStar's Repository")])),_:1}),s[5]||(s[5]=n(`\\n\\
        `)),t(d,null,{default:i(()=>s[2]||(s[2]=[n("https://maven.mrnavastar.me/releases")])),_:1}),s[6]||(s[6]=n(`\\n\\
    `))]),_:1}),s[8]||(s[8]=n(`\\n\\
`))]),_:1}),s[21]||(s[21]=n(`\\n\\
`)),t(m,null,{default:i(()=>[s[18]||(s[18]=n(`\\n\\
    `)),t(c,null,{default:i(()=>[s[13]||(s[13]=n(`\\n\\
        `)),t(u,null,{default:i(()=>s[9]||(s[9]=[n("group.aelysium")])),_:1}),s[14]||(s[14]=n(`\\n\\
        `)),t(y,null,{default:i(()=>s[10]||(s[10]=[n("rustyconnector-toolkit")])),_:1}),s[15]||(s[15]=n(`\\n\\
        `)),t(g,null,{default:i(()=>s[11]||(s[11]=[n("0.8.0")])),_:1}),s[16]||(s[16]=n(`\\n\\
        `)),t(E,null,{default:i(()=>s[12]||(s[12]=[n("provided")])),_:1}),s[17]||(s[17]=n(`\\n\\
    `))]),_:1}),s[19]||(s[19]=n(`\\n\\
`))]),_:1}),s[22]||(s[22]=n(`\\
        "}`))])])]),_:1}),t(o,{value:"gradle-groovy",label:"Gradle (Groovy DSL)"},{default:i(()=>s[23]||(s[23]=[a("pre",null,[a("code",null,`{"\\
repositories {\\n\\
    maven { url \\"https://maven.mrnavastar.me/releases\\" }\\n\\
}\\n\\
\\n\\
dependencies {\\n\\
    compileOnly \\"group.aelysium:rustyconnector-toolkit:0.8.0\\"\\n\\
}\\
        "}`)],-1)])),_:1}),t(o,{value:"gradle-kotlin",label:"Gradle (Kotlin DSL)"},{default:i(()=>s[24]||(s[24]=[a("pre",null,[a("code",null,`{"\\
repositories {\\n\\
    maven(\\"https://maven.mrnavastar.me/releases\\")\\n\\
}\\n\\
\\n\\
dependencies {\\n\\
    compileOnly(\\"group.aelysium:rustyconnector-toolkit:0.8.0\\")\\n\\
}\\
        "}`)],-1)])),_:1})]),_:1}),s[26]||(s[26]=l(`<p>:::caution If you&#39;re unable to install the Toolkit API, it&#39;s possible that our Maven Repository is down. You can check it&#39;s status <a href="https://status.mrnavastar.me/status/services" target="_blank" rel="noreferrer">here</a>.</p><p>If it is down, <a href="https://join.aelysium.group" target="_blank" rel="noreferrer">join our Discord</a> and let us know. :::</p><p>Once imported, you can access the RustyConnector Toolkit from either the Proxy or MCLoader. In order to use Toolkit, you must ensure that RustyConnector is added as a dependency in your plugin.</p><h2 id="accessing-toolkit" tabindex="-1">Accessing Toolkit <a class="header-anchor" href="#accessing-toolkit" aria-label="Permalink to &quot;Accessing Toolkit&quot;">​</a></h2><p>Toolkit can be accessed using the <code>RustyConnector.Toolkit</code> package. You can access Toolkit using either the <code>.proxy()</code> or <code>.mcLoader()</code> accessors which will return an <code>Optional</code>. The Optional will throw an exception if the api for the specific RustyConnector loader hasn&#39;t been registered yet. If you properly set RustyConnector as a dependency in your plugin, this shouldn&#39;t happen.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VelocityTinder tinder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RustyConnector.Toolkit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orElseThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MCLoaderTinder tinder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RustyConnector.Toolkit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mcLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orElseThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="accessing-flame" tabindex="-1">Accessing Flame <a class="header-anchor" href="#accessing-flame" aria-label="Permalink to &quot;Accessing Flame&quot;">​</a></h2><p>The Flame is the running kernel of RustyConnector. As a module developer, you have no way of knowing if or when the Flame is available. Instead you hook into the <code>Tinder#onStart</code> and <code>Tinder#onStop</code> methods to react to Flame availability.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VelocityTinder tinder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RustyConnector.Toolkit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orElseThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tinder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">versionAsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tinder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onStop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Lost connection to RustyConnector! Waiting for it to restart...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>If a flame already exists and you call <code>Tinder#onStart</code>, it will immediately return the existing flame to the passed <code>Consumer</code>.</p>`,11))])}const S=v(F,[["render",T]]);export{A as __pageData,S as default};
