import{_ as o,c as t,a1 as a,o as i}from"./chunks/framework.C7abYapc.js";const u=JSON.parse('{"title":"☁️ Families","description":"","frontmatter":{"title":"☁️ Families"},"headers":[],"relativePath":"rusty-connector/docs/concepts/families/index.md","filePath":"rusty-connector/docs/concepts/families/index.md"}'),s={name:"rusty-connector/docs/concepts/families/index.md"};function r(l,e,n,c,d,f){return i(),t("div",null,e[0]||(e[0]=[a('<p>Families are the backbone of RustyConnector. They can be thought of as &quot;server collections.&quot; MCLoaders always have a &quot;theme&quot; and therefore they always belong to a family.</p><p>The hard part about setting up a RustyConnector Network is deciding how to setup your families. If you can master that, you&#39;ve mastered RustyConnector.</p><p>Let&#39;s dive in!</p><h2 id="how-do-they-work" tabindex="-1">How do they work? <a class="header-anchor" href="#how-do-they-work" aria-label="Permalink to &quot;How do they work?&quot;">​</a></h2><p>You configure your families in <code>families.yml</code>, from there RustyConnector will create a custom config for your family in the <code>families</code> folder. This config will allow you to make further edits to your family! If you remove a family from <code>families.yml</code> that family will no longer be registered on RustyConnector and MCLoaders will no longer be able to register to it. When you setup your families you must define a family as your <code>root-family</code>. This is the family that players will automatically load into when they log onto your network.</p><div class="info custom-block"><p class="custom-block-title">What&#39;s with all the clouds?</p><p>Families can be complex, we use Clouds to help us describe certain behaviors of families. When reading family docs, keep a look out for info tabs with a ☁️ emoji.</p></div><p>Different families are optimized for different usecases. Follow one of the links below to read up on them all!</p>',7)]))}const h=o(s,[["render",r]]);export{u as __pageData,h as default};
